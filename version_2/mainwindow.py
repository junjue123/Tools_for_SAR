# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QFont
from PyQt5.QtWidgets import QFileDialog, QDesktopWidget, QWidget, QApplication

from PyQt5.QtWidgets import QTableWidget, QTableWidgetItem

from thread import Worker
import demo_rc
import methods
import os

from openpyxl import load_workbook
from openpyxl.utils import get_column_letter


class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(2000, 1000)
        MainWindow.showMaximized()

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(1500, 900))
        self.centralwidget.setStyleSheet("#centralwidget{border-image: url(:/logo/背景.jpg);}")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.title = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title.sizePolicy().hasHeightForWidth())
        self.title.setSizePolicy(sizePolicy)
        self.title.setMinimumSize(QtCore.QSize(10, 150))
        self.title.setMaximumSize(QtCore.QSize(16777215, 150))
        self.title.setStyleSheet("background-image: url(:/logo/背景.jpg);")
        self.title.setTextFormat(QtCore.Qt.AutoText)
        self.title.setObjectName("title")
        self.horizontalLayout.addWidget(self.title)
        self.logo = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.logo.sizePolicy().hasHeightForWidth())
        self.logo.setSizePolicy(sizePolicy)
        self.logo.setMinimumSize(QtCore.QSize(150, 150))
        self.logo.setMaximumSize(QtCore.QSize(150, 150))
        self.logo.setText("")
        self.logo.setPixmap(QtGui.QPixmap(":/logo/校徽.png"))
        self.logo.setScaledContents(True)
        self.logo.setAlignment(QtCore.Qt.AlignCenter)
        self.logo.setObjectName("logo")
        self.horizontalLayout.addWidget(self.logo)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_3.sizePolicy().hasHeightForWidth())
        self.groupBox_3.setSizePolicy(sizePolicy)
        self.groupBox_3.setMinimumSize(QtCore.QSize(700, 0))
        self.groupBox_3.setMaximumSize(QtCore.QSize(700, 16777215))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setStyleSheet("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.groupBox_3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.groupBox = QtWidgets.QGroupBox(self.groupBox_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setMinimumSize(QtCore.QSize(220, 250))
        self.groupBox.setMaximumSize(QtCore.QSize(220, 250))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("新宋体")
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_4.addWidget(self.label)
        self.Ship_or_Aircraft = QtWidgets.QComboBox(self.groupBox)
        self.Ship_or_Aircraft.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Ship_or_Aircraft.sizePolicy().hasHeightForWidth())
        self.Ship_or_Aircraft.setSizePolicy(sizePolicy)
        self.Ship_or_Aircraft.setMinimumSize(QtCore.QSize(200, 60))
        self.Ship_or_Aircraft.setMaximumSize(QtCore.QSize(200, 60))
        self.Ship_or_Aircraft.setMouseTracking(False)
        self.Ship_or_Aircraft.setFocusPolicy(QtCore.Qt.NoFocus)
        self.Ship_or_Aircraft.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Ship_or_Aircraft.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.Ship_or_Aircraft.setObjectName("Ship_or_Aircraft")
        self.verticalLayout_4.addWidget(self.Ship_or_Aircraft, 0, QtCore.Qt.AlignHCenter)
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("新宋体")
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_4.addWidget(self.label_2)
        self.Functions = QtWidgets.QComboBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Functions.sizePolicy().hasHeightForWidth())
        self.Functions.setSizePolicy(sizePolicy)
        self.Functions.setMinimumSize(QtCore.QSize(200, 60))
        self.Functions.setMaximumSize(QtCore.QSize(200, 60))
        self.Functions.setFocusPolicy(QtCore.Qt.NoFocus)
        self.Functions.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.Functions.setObjectName("Functions")
        self.verticalLayout_4.addWidget(self.Functions, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout_4.setStretch(0, 2)
        self.verticalLayout_4.setStretch(1, 3)
        self.verticalLayout_4.setStretch(2, 2)
        self.verticalLayout_4.setStretch(3, 3)
        self.horizontalLayout_3.addWidget(self.groupBox)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_2.sizePolicy().hasHeightForWidth())
        self.groupBox_2.setSizePolicy(sizePolicy)
        self.groupBox_2.setMinimumSize(QtCore.QSize(260, 250))
        self.groupBox_2.setMaximumSize(QtCore.QSize(260, 250))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setStyleSheet("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.Image_Choose = QtWidgets.QPushButton(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Image_Choose.sizePolicy().hasHeightForWidth())
        self.Image_Choose.setSizePolicy(sizePolicy)
        self.Image_Choose.setMinimumSize(QtCore.QSize(240, 80))
        self.Image_Choose.setMaximumSize(QtCore.QSize(240, 80))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        self.Image_Choose.setFont(font)
        self.Image_Choose.setFocusPolicy(QtCore.Qt.NoFocus)
        self.Image_Choose.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:1, y1:1, x2:0.403273, y2:0.494318, stop:0 rgba(173, 173, 173, 255), stop:1 rgba(255, 255, 255, 255));")
        self.Image_Choose.setIconSize(QtCore.QSize(8, 3))
        self.Image_Choose.setObjectName("Image_Choose")
        self.verticalLayout_5.addWidget(self.Image_Choose)
        self.Start = QtWidgets.QPushButton(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Start.sizePolicy().hasHeightForWidth())
        self.Start.setSizePolicy(sizePolicy)
        self.Start.setMinimumSize(QtCore.QSize(240, 80))
        self.Start.setMaximumSize(QtCore.QSize(240, 80))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        self.Start.setFont(font)
        self.Start.setFocusPolicy(QtCore.Qt.NoFocus)
        self.Start.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:1, y1:1, x2:0.403273, y2:0.494318, stop:0 rgba(173, 173, 173, 255), stop:1 rgba(255, 255, 255, 255));")
        self.Start.setIconSize(QtCore.QSize(8, 3))
        self.Start.setObjectName("Start")
        self.verticalLayout_5.addWidget(self.Start)
        self.verticalLayout_5.setStretch(0, 1)
        self.verticalLayout_5.setStretch(1, 1)
        self.horizontalLayout_3.addWidget(self.groupBox_2)
        self.horizontalLayout_3.setStretch(0, 3)
        self.horizontalLayout_3.setStretch(1, 1)
        self.horizontalLayout_3.setStretch(2, 3)
        self.verticalLayout_2.addWidget(self.groupBox_3)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_4.sizePolicy().hasHeightForWidth())
        self.groupBox_4.setSizePolicy(sizePolicy)
        self.groupBox_4.setMinimumSize(QtCore.QSize(700, 300))
        self.groupBox_4.setMaximumSize(QtCore.QSize(700, 1500))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout.setObjectName("verticalLayout")
        self.table = QtWidgets.QTableWidget(self.groupBox_4)
        self.table.setObjectName("table")
        self.table.setColumnCount(0)
        self.table.setRowCount(0)
        self.verticalLayout.addWidget(self.table)
        self.verticalLayout_2.addWidget(self.groupBox_4)
        self.verticalLayout_2.setStretch(0, 4)
        self.verticalLayout_2.setStretch(1, 1)
        self.verticalLayout_2.setStretch(2, 7)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(100, 100))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setMinimumSize(QtCore.QSize(100, 100))
        self.tab.setObjectName("tab")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.inputimg = QtWidgets.QLabel(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.inputimg.sizePolicy().hasHeightForWidth())
        self.inputimg.setSizePolicy(sizePolicy)
        self.inputimg.setMinimumSize(QtCore.QSize(10, 10))
        self.inputimg.setMaximumSize(QtCore.QSize(20000, 20000))
        self.inputimg.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.inputimg.setFrameShape(QtWidgets.QFrame.Box)
        self.inputimg.setObjectName("inputimg")
        self.gridLayout_2.addWidget(self.inputimg, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setMinimumSize(QtCore.QSize(100, 100))
        self.tab_2.setObjectName("tab_2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_2)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.outputimg = QtWidgets.QLabel(self.tab_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.outputimg.sizePolicy().hasHeightForWidth())
        self.outputimg.setSizePolicy(sizePolicy)
        self.outputimg.setMinimumSize(QtCore.QSize(10, 10))
        self.outputimg.setMaximumSize(QtCore.QSize(20000, 20000))
        self.outputimg.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.outputimg.setFrameShape(QtWidgets.QFrame.Box)
        self.outputimg.setObjectName("outputimg")
        self.gridLayout_3.addWidget(self.outputimg, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout_2.addWidget(self.tabWidget)
        self.horizontalLayout_2.setStretch(0, 3)
        self.horizontalLayout_2.setStretch(1, 1)
        self.horizontalLayout_2.setStretch(2, 8)
        self.gridLayout.addLayout(self.horizontalLayout_2, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1729, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.groupBox.setStyleSheet("QGroupBox { color: white; border: 2px solid white;}")
        self.groupBox_2.setStyleSheet("QGroupBox { color: white; border: 2px solid white;}")
        self.groupBox_3.setStyleSheet("QGroupBox { color: white; border: 2px solid white;}")
        self.groupBox_4.setStyleSheet("QGroupBox { color: white; border: 2px solid white;}")
        self.Image_Choose.clicked.connect(self.ImageChoose)
        self.Start.clicked.connect(self.QtStart)
        MainWindow.resizeEvent = self.ResizeEvent
        self.Ship_or_Aircraft.mousePressEvent = self.onComboClicked
        self.Ship_or_Aircraft_already_filled = False
        self.Ship_or_Aircraft.currentTextChanged.connect(self.update_functions)

        self.imgpath = ""
        self.savepath = ""
        self.outputpath = ""

    def onComboClicked(self, event):
        QtWidgets.QComboBox.showPopup(self.Ship_or_Aircraft)
        if not self.Ship_or_Aircraft_already_filled:
            font = QFont()
            font.setFamily("Arial")
            font.setBold(True)
            font.setPointSize(9)
            self.Ship_or_Aircraft.setFont(font)
            self.Ship_or_Aircraft.addItems(['舰船', '飞机'])
            self.Ship_or_Aircraft_already_filled = True

    def update_functions(self, text):
        font = QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setPointSize(9)
        self.Functions.setFont(font)
        # 根据第一个下拉列表的选择更新第二个下拉列表的内容
        if text == '舰船':
            self.Functions.clear()
            self.Functions.addItems(['海陆分割', '舰船检测', '舰船识别'])
        elif text == '飞机':
            self.Functions.clear()
            self.Functions.addItems(['机场检测', '飞机检测', '飞机识别'])

    def ImageChoose(self):
        if self.imgpath != "":
            self.imgpath = ""
            self.savepath = ""
            self.outputpath = ""
            self.inputimg.setText("<html><head/><body><p align=\"center\"><span style=\" font-size:18pt; font-weight:600;\">输入图片</span></p></body></html>")
            self.outputimg.setText("<html><head/><body><p align=\"center\"><span style=\" font-size:18pt; font-weight:600;\">输出图片</span></p></body></html>")
        file_path, _ = QFileDialog.getOpenFileName(self, "选择文件", "","All Files(*)",None,QFileDialog.DontUseNativeDialog)
        if file_path == "":
            pass
        else:
            print(file_path)
            self.imgpath = file_path
            self.showinputimg()
        print("Image_Choose")

    def QtStart(self):
        function = self.Functions.currentText()
        if function == "海陆分割":
            self.Sea_or_Land()
        elif function == "舰船检测":
            self.Ship_Detection()
        elif function == "舰船识别":
            self.Ship_Identification()
        elif function == "机场检测":
            self.Airport_Detection()
        elif function == "飞机检测":
            self.Aircraft_Detection()
        elif function == "飞机识别":
            self.Aircraft_Identification()
        else:
            methods.message_functionchoose()

    def Save_path(self):
        self.outputpath = ""
        save_path = QFileDialog.getExistingDirectory(self, "选取文件夹", "C:/", QFileDialog.ShowDirsOnly)
        if save_path == ".":
            pass
        else:
            print(save_path)
            self.savepath = save_path
        print("Save_path")


    def Airport_Detection(self):
        imgpath = self.imgpath
        if self.savepath == "":
            savepath = "../../../output/Airport_Detection/output.jpg"
            self.outputpath = "output/Airport_Detection/output.jpg"
        else:
            savepath = self.savepath + "/Airport_Detection/output.jpg"
            self.outputpath = savepath
        if methods.message_button(imgpath, savepath):
            self.thread = Worker(imgpath, savepath, "Airport_Detection")
            self.thread.finished.connect(self.onAirportDetectionFinished)
            self.thread.start()
        print("Airport_Detection")

    def Sea_or_Land(self):
        imgpath = self.imgpath
        if self.savepath == "":
            savepath = "../output/Sea_or_Land/output.jpg"
            self.outputpath = "output/Sea_or_Land/output.jpg"
        else:
            savepath = self.savepath + "/Sea_or_Land/output.jpg"
            self.outputpath = savepath
        if methods.message_button(imgpath, savepath):
            self.thread = Worker(imgpath, savepath, "Sea_or_Land")
            self.thread.finished.connect(self.onAirportDetectionFinished)
            self.thread.start()
        print("Sea_or_Land")

    def Ship_Detection(self):
        imgpath = self.imgpath
        if self.savepath == "":
            savepath = "../../output/Ship_Detection/output.jpg"
            self.outputpath = "output/Ship_Detection/output.jpg"
        else:
            savepath = self.savepath + "/Ship_Detection/output.jpg"
            self.outputpath = savepath
        if methods.message_button(imgpath, savepath):
            self.thread = Worker(imgpath, savepath, "Ship_Detection")
            self.thread.finished.connect(self.onAirportDetectionFinished)
            self.thread.start()
        print("Ship_Detection")

    def Ship_Identification(self):
        imgpath = self.imgpath
        if self.savepath == "":
            savepath = "../output/Ship_Identification/output.jpg"
            self.outputpath = "output/Ship_Identification/output.jpg"
        else:
            savepath = self.savepath + "/Ship_Identification/output.jpg"
            self.outputpath = savepath
        if methods.message_button(imgpath, savepath):
            self.thread = Worker(imgpath, savepath, "Ship_Identification")
            self.thread.finished.connect(self.onAirportDetectionFinished)
            self.thread.start()
        print("Ship_Identification")

    def Aircraft_Detection(self):
        imgpath = self.imgpath
        if self.savepath == "":
            savepath = "../../output/Aircraft_Detection/output.jpg"
            self.outputpath = "output/Aircraft_Detection/output.jpg"
        else:
            savepath = self.savepath + "/Aircraft_Detection/output.jpg"
            self.outputpath = savepath
        if methods.message_button(imgpath, savepath):
            self.thread = Worker(imgpath, savepath, "Aircraft_Detection")
            self.thread.finished.connect(self.onAirportDetectionFinished)
            self.thread.start()
        print("Aircraft_Detection")

    def Aircraft_Identification(self):
        imgpath = self.imgpath
        if self.savepath == "":
            savepath = "../output/Aircraft_Identification/output.jpg"
            self.outputpath = "output/Aircraft_Identification/output.jpg"
        else:
            savepath = self.savepath + "/Aircraft_Identification/output.jpg"
            self.outputpath = savepath
        if methods.message_button(imgpath, savepath):
            self.thread = Worker(imgpath, savepath, "Aircraft_Identification")
            self.thread.finished.connect(self.onAirportDetectionFinished)
            self.thread.start()
        print("Aircraft_Identification")

    def onAirportDetectionFinished(self):
        # 线程完成后执行的操作
        self.showoutputimg()
        self.read_output_xlsx()

    def ResizeEvent(self, event):
        if self.imgpath:
            self.showinputimg()
            self.showoutputimg()
        super(Ui_MainWindow, self).resizeEvent(event)

    def showinputimg(self):
        if self.imgpath:
            input_img = QtGui.QPixmap(self.imgpath).scaled(self.inputimg.width(), self.inputimg.height())
            self.inputimg.setPixmap(input_img)
            self.inputimg.setScaledContents(True)

    def showoutputimg(self):
        if self.outputpath:
            output_img = QtGui.QPixmap(self.outputpath).scaled(self.outputimg.width(), self.outputimg.height())
            self.outputimg.setPixmap(output_img)
            self.outputimg.setScaledContents(True)

    # def read_output_txt(self):
    #     self.out_info.clear()
    #     txt_path = os.path.splitext(self.outputpath)[0] + '.txt'
    #     if os.path.exists(txt_path):
    #         with open(txt_path, 'r') as f:
    #             content = f.read()
    #             self.out_info.setText(content)

    def read_output_xlsx(self):
        self.table.clear()
        xlsx_path = os.path.splitext(self.outputpath)[0] + '.xlsx'
        if os.path.exists(xlsx_path):
            book = load_workbook(filename=xlsx_path)
            sheet = book.active
            nrows = sheet.max_row  # 取最大行数
            ncols = min(sheet.max_column, 26)
            self.table.setRowCount(nrows)  # 设置行数
            self.table.setColumnCount(ncols)  # 设置列数
            headers = tuple("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
            self.table.setHorizontalHeaderLabels(headers[:ncols])

            self.table.setUpdatesEnabled(False)  # 禁用更新以提高性能

            # 遍历Excel数据并插入到表格控件中
            for row, row_data in enumerate(sheet.iter_rows()):
                for col, cell in enumerate(row_data[:ncols]):  # 限制列的处理范围
                    item = QTableWidgetItem(str(cell.value) if cell.value is not None else '')
                    self.table.setItem(row, col, item)
            self.table.setColumnWidth(1, 300)
            self.table.setColumnWidth(2, 200)
            self.table.setUpdatesEnabled(True)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Tools_for_SAR"))
        self.title.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; font-weight:600; color:#ffffff;\">卫星SAR图像目标检测识别软件</span></p></body></html>"))
        self.groupBox_3.setTitle(_translate("MainWindow", "操作区"))
        self.groupBox.setTitle(_translate("MainWindow", "选择功能"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">选择目标</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">选择具体功能</span></p></body></html>"))
        self.groupBox_2.setTitle(_translate("MainWindow", "执行按键"))
        self.Image_Choose.setText(_translate("MainWindow", "选择图片"))
        self.Start.setText(_translate("MainWindow", "开始"))
        self.groupBox_4.setTitle(_translate("MainWindow", "输出信息"))
        self.inputimg.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt; font-weight:600;\">输入图片</span></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "输入图片"))
        self.outputimg.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt; font-weight:600;\">输出图片</span></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "输出图片"))


