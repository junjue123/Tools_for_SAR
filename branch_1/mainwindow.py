# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QFileDialog,QWidget

from PyQt5.QtWidgets import QTableWidgetItem

from thread import Worker
import methods
from label import ZoomableDraggableLabel
from json2xlsx import json_to_excel
from txt2xlsx import txt_to_xlsx
from MyTable import MyTableWidget
from calculate import match_targets_by_distance,calculate_dynamic_weights

import os,sys
from openpyxl import load_workbook, Workbook
import subprocess


class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        # 保证打开界面时为最大化界面
        MainWindow.resize(2000, 1000)
        MainWindow.showMaximized()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(1500, 900))
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget_2 = QtWidgets.QTabWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        self.tabWidget_2.setFont(font)
        self.tabWidget_2.setObjectName("tabWidget_2")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.tab_3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_2.sizePolicy().hasHeightForWidth())
        self.groupBox_2.setSizePolicy(sizePolicy)
        self.groupBox_2.setMinimumSize(QtCore.QSize(260, 300))
        self.groupBox_2.setMaximumSize(QtCore.QSize(700, 300))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setStyleSheet("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label = QtWidgets.QLabel(self.groupBox_2)
        self.label.setObjectName("label")
        self.horizontalLayout_10.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setMinimumSize(QtCore.QSize(0, 70))
        self.comboBox.setMaximumSize(QtCore.QSize(16777215, 70))
        self.comboBox.setObjectName("comboBox")
        self.horizontalLayout_10.addWidget(self.comboBox)
        self.verticalLayout_3.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.Huge_Image_Choose = QtWidgets.QPushButton(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Huge_Image_Choose.sizePolicy().hasHeightForWidth())
        self.Huge_Image_Choose.setSizePolicy(sizePolicy)
        self.Huge_Image_Choose.setMinimumSize(QtCore.QSize(200, 70))
        self.Huge_Image_Choose.setMaximumSize(QtCore.QSize(200, 70))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Huge_Image_Choose.setFont(font)
        self.Huge_Image_Choose.setStyleSheet("background-color: qlineargradient(spread:pad, x1:1, y1:1, x2:0.403273, y2:0.494318, stop:0 rgba(173, 173, 173, 255), stop:1 rgba(255, 255, 255, 255));")
        self.Huge_Image_Choose.setObjectName("Huge_Image_Choose")
        self.horizontalLayout_11.addWidget(self.Huge_Image_Choose)
        self.Start = QtWidgets.QPushButton(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Start.sizePolicy().hasHeightForWidth())
        self.Start.setSizePolicy(sizePolicy)
        self.Start.setMinimumSize(QtCore.QSize(200, 70))
        self.Start.setMaximumSize(QtCore.QSize(200, 70))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Start.setFont(font)
        self.Start.setFocusPolicy(QtCore.Qt.NoFocus)
        self.Start.setStyleSheet("background-color: qlineargradient(spread:pad, x1:1, y1:1, x2:0.403273, y2:0.494318, stop:0 rgba(173, 173, 173, 255), stop:1 rgba(255, 255, 255, 255));")
        self.Start.setIconSize(QtCore.QSize(8, 3))
        self.Start.setObjectName("Start")
        self.horizontalLayout_11.addWidget(self.Start)
        self.verticalLayout_3.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.remix = QtWidgets.QPushButton(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.remix.sizePolicy().hasHeightForWidth())
        self.remix.setSizePolicy(sizePolicy)
        self.remix.setMinimumSize(QtCore.QSize(200, 70))
        self.remix.setMaximumSize(QtCore.QSize(200, 70))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.remix.setFont(font)
        self.remix.setStyleSheet("background-color: qlineargradient(spread:pad, x1:1, y1:1, x2:0.403273, y2:0.494318, stop:0 rgba(173, 173, 173, 255), stop:1 rgba(255, 255, 255, 255));")
        self.remix.setObjectName("remix")
        self.horizontalLayout_9.addWidget(self.remix)
        self.verticalLayout_3.addLayout(self.horizontalLayout_9)
        self.verticalLayout_2.addWidget(self.groupBox_2)
        self.groupBox_4 = QtWidgets.QGroupBox(self.tab_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_4.sizePolicy().hasHeightForWidth())
        self.groupBox_4.setSizePolicy(sizePolicy)
        self.groupBox_4.setMinimumSize(QtCore.QSize(700, 300))
        self.groupBox_4.setMaximumSize(QtCore.QSize(700, 1500))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout.setObjectName("verticalLayout")
        # 创建一个新Table类
        self.output = MyTableWidget(self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.output.sizePolicy().hasHeightForWidth())
        self.output.setSizePolicy(sizePolicy)
        self.output.setObjectName("output")
        self.output.setColumnCount(0)
        self.output.setRowCount(0)
        self.verticalLayout.addWidget(self.output)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.verticalLayout_2.addWidget(self.groupBox_4)
        self.verticalLayout_2.setStretch(0, 1)
        self.verticalLayout_2.setStretch(1, 6)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        # 实现缩放和定位功能
        self.inputimage = ZoomableDraggableLabel(self.tab_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.inputimage.sizePolicy().hasHeightForWidth())
        self.inputimage.setSizePolicy(sizePolicy)
        self.inputimage.setMinimumSize(QtCore.QSize(600, 400))
        self.inputimage.setMaximumSize(QtCore.QSize(1600, 800))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        self.inputimage.setFont(font)
        self.inputimage.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.inputimage.setFrameShape(QtWidgets.QFrame.Box)
        self.inputimage.setFrameShadow(QtWidgets.QFrame.Plain)
        self.inputimage.setObjectName("inputimage")
        self.verticalLayout_4.addWidget(self.inputimage)
        # 实现缩放和定位功能
        self.outputimage = ZoomableDraggableLabel(self.tab_3)
        self.outputimage.setMinimumSize(QtCore.QSize(600, 400))
        self.outputimage.setMaximumSize(QtCore.QSize(1600, 800))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        self.outputimage.setFont(font)
        self.outputimage.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.outputimage.setFrameShape(QtWidgets.QFrame.Box)
        self.outputimage.setObjectName("outputimage")
        self.verticalLayout_4.addWidget(self.outputimage)
        self.verticalLayout_4.setStretch(0, 1)
        self.verticalLayout_4.setStretch(1, 1)
        self.horizontalLayout.addLayout(self.verticalLayout_4)
        self.horizontalLayout.setStretch(0, 8)
        self.horizontalLayout.setStretch(1, 1)
        self.horizontalLayout.setStretch(2, 15)
        self.horizontalLayout_3.addLayout(self.horizontalLayout)
        self.tabWidget_2.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.tab_4)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.groupBox_3 = QtWidgets.QGroupBox(self.tab_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_3.sizePolicy().hasHeightForWidth())
        self.groupBox_3.setSizePolicy(sizePolicy)
        self.groupBox_3.setMinimumSize(QtCore.QSize(260, 200))
        self.groupBox_3.setMaximumSize(QtCore.QSize(700, 200))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setStyleSheet("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.SAR_Choose = QtWidgets.QPushButton(self.groupBox_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SAR_Choose.sizePolicy().hasHeightForWidth())
        self.SAR_Choose.setSizePolicy(sizePolicy)
        self.SAR_Choose.setMinimumSize(QtCore.QSize(200, 70))
        self.SAR_Choose.setMaximumSize(QtCore.QSize(200, 70))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.SAR_Choose.setFont(font)
        self.SAR_Choose.setStyleSheet("background-color: qlineargradient(spread:pad, x1:1, y1:1, x2:0.403273, y2:0.494318, stop:0 rgba(173, 173, 173, 255), stop:1 rgba(255, 255, 255, 255));")
        self.SAR_Choose.setObjectName("SAR_Choose")
        self.horizontalLayout_13.addWidget(self.SAR_Choose)
        self.optical_Choose = QtWidgets.QPushButton(self.groupBox_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.optical_Choose.sizePolicy().hasHeightForWidth())
        self.optical_Choose.setSizePolicy(sizePolicy)
        self.optical_Choose.setMinimumSize(QtCore.QSize(200, 70))
        self.optical_Choose.setMaximumSize(QtCore.QSize(200, 70))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.optical_Choose.setFont(font)
        self.optical_Choose.setFocusPolicy(QtCore.Qt.NoFocus)
        self.optical_Choose.setStyleSheet("background-color: qlineargradient(spread:pad, x1:1, y1:1, x2:0.403273, y2:0.494318, stop:0 rgba(173, 173, 173, 255), stop:1 rgba(255, 255, 255, 255));")
        self.optical_Choose.setIconSize(QtCore.QSize(8, 3))
        self.optical_Choose.setObjectName("optical_Choose")
        self.horizontalLayout_13.addWidget(self.optical_Choose)
        self.verticalLayout_6.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.Start_2 = QtWidgets.QPushButton(self.groupBox_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Start_2.sizePolicy().hasHeightForWidth())
        self.Start_2.setSizePolicy(sizePolicy)
        self.Start_2.setMaximumSize(QtCore.QSize(200, 70))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Start_2.setFont(font)
        self.Start_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:1, y1:1, x2:0.403273, y2:0.494318, stop:0 rgba(173, 173, 173, 255), stop:1 rgba(255, 255, 255, 255));")
        self.Start_2.setObjectName("Start_2")
        self.horizontalLayout_12.addWidget(self.Start_2)
        self.check = QtWidgets.QPushButton(self.groupBox_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.check.sizePolicy().hasHeightForWidth())
        self.check.setSizePolicy(sizePolicy)
        self.check.setMinimumSize(QtCore.QSize(200, 70))
        self.check.setMaximumSize(QtCore.QSize(200, 70))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.check.setFont(font)
        self.check.setStyleSheet("background-color: qlineargradient(spread:pad, x1:1, y1:1, x2:0.403273, y2:0.494318, stop:0 rgba(173, 173, 173, 255), stop:1 rgba(255, 255, 255, 255));")
        self.check.setObjectName("check")
        self.horizontalLayout_12.addWidget(self.check)
        self.verticalLayout_6.addLayout(self.horizontalLayout_12)
        self.verticalLayout_5.addWidget(self.groupBox_3)
        self.groupBox_5 = QtWidgets.QGroupBox(self.tab_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_5.sizePolicy().hasHeightForWidth())
        self.groupBox_5.setSizePolicy(sizePolicy)
        self.groupBox_5.setMinimumSize(QtCore.QSize(700, 300))
        self.groupBox_5.setMaximumSize(QtCore.QSize(700, 1500))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setObjectName("groupBox_5")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox_5)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        # 修改类别
        self.label_2 = QtWidgets.QTextEdit(self.groupBox_5)
        self.label_2.setMinimumSize(QtCore.QSize(0, 100))
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 100))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_7.addWidget(self.label_2)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        # 修改为滚动条类别
        self.label_remix = QtWidgets.QTextEdit(self.groupBox_5)
        # 将label_remix设置为只读
        self.label_remix.setReadOnly(True)
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_remix.setFont(font)
        self.label_remix.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_remix.setFrameShape(QtWidgets.QFrame.Box)
        self.label_remix.setObjectName("label_remix")
        self.verticalLayout_9.addWidget(self.label_remix)
        self.label_confidence = QtWidgets.QLabel(self.groupBox_5)
        self.label_confidence.setMinimumSize(QtCore.QSize(600, 70))
        self.label_confidence.setMaximumSize(QtCore.QSize(600, 70))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_confidence.setFont(font)
        self.label_confidence.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_confidence.setFrameShape(QtWidgets.QFrame.Box)
        self.label_confidence.setObjectName("label_confidence")
        self.verticalLayout_9.addWidget(self.label_confidence, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_8.addLayout(self.verticalLayout_9)
        self.verticalLayout_7.addLayout(self.horizontalLayout_8)
        self.verticalLayout_5.addWidget(self.groupBox_5)
        self.verticalLayout_5.setStretch(0, 1)
        self.verticalLayout_5.setStretch(1, 6)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        # 实现缩放定位功能
        self.input_SAR = ZoomableDraggableLabel(self.tab_4)
        self.input_SAR.setMinimumSize(QtCore.QSize(300, 300))
        self.input_SAR.setMaximumSize(QtCore.QSize(800, 600))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        self.input_SAR.setFont(font)
        self.input_SAR.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.input_SAR.setFrameShape(QtWidgets.QFrame.Box)
        self.input_SAR.setObjectName("input_SAR")
        self.horizontalLayout_7.addWidget(self.input_SAR)
        # 实现缩放定位功能
        self.output_SAR = ZoomableDraggableLabel(self.tab_4)
        self.output_SAR.setMinimumSize(QtCore.QSize(300, 300))
        self.output_SAR.setMaximumSize(QtCore.QSize(800, 600))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        self.output_SAR.setFont(font)
        self.output_SAR.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.output_SAR.setFrameShape(QtWidgets.QFrame.Box)
        self.output_SAR.setObjectName("output_SAR")
        self.horizontalLayout_7.addWidget(self.output_SAR)
        self.horizontalLayout_7.setStretch(0, 1)
        self.horizontalLayout_7.setStretch(1, 1)
        self.verticalLayout_8.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        # 实现缩放定位功能
        self.input_2 = ZoomableDraggableLabel(self.tab_4)
        self.input_2.setMinimumSize(QtCore.QSize(300, 300))
        self.input_2.setMaximumSize(QtCore.QSize(800, 600))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        self.input_2.setFont(font)
        self.input_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.input_2.setFrameShape(QtWidgets.QFrame.Box)
        self.input_2.setObjectName("input_2")
        self.horizontalLayout_5.addWidget(self.input_2)
        # 实现缩放定位功能
        self.output_2 = ZoomableDraggableLabel(self.tab_4)
        self.output_2.setMinimumSize(QtCore.QSize(300, 300))
        self.output_2.setMaximumSize(QtCore.QSize(800, 600))
        font = QtGui.QFont()
        font.setFamily("新宋体")
        font.setPointSize(12)
        self.output_2.setFont(font)
        self.output_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.output_2.setFrameShape(QtWidgets.QFrame.Box)
        self.output_2.setObjectName("output_2")
        self.horizontalLayout_5.addWidget(self.output_2)
        self.horizontalLayout_5.setStretch(0, 1)
        self.horizontalLayout_5.setStretch(1, 1)
        self.verticalLayout_8.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_8)
        self.horizontalLayout_2.setStretch(0, 8)
        self.horizontalLayout_2.setStretch(1, 1)
        self.horizontalLayout_2.setStretch(2, 15)
        self.horizontalLayout_4.addLayout(self.horizontalLayout_2)
        self.tabWidget_2.addTab(self.tab_4, "")
        self.gridLayout.addWidget(self.tabWidget_2, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1372, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget_2.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 初始化下拉框
        self.comboBox.mousePressEvent = lambda event, idx=1: self.onComboClicked(idx, event)
        self.comboBox_already_filled = False

        # 绑定表格和显示框
        self.output.set_target_label(self.outputimage)

        # 按键绑定功能
        self.SAR_Choose.clicked.connect(self.SARImageChoose)
        self.optical_Choose.clicked.connect(self.opticalImageChoose)
        self.Start.clicked.connect(self.QtStart)
        self.Huge_Image_Choose.clicked.connect(self.HugeImageChoose)
        self.remix.clicked.connect(self.ReMix)
        self.Start_2.clicked.connect(self.ReMix_2)
        self.check.clicked.connect(self.Check)

        # 重写resize功能
        MainWindow.resizeEvent = self.ResizeEvent

        # 定义各个目录
        self.imgpath = ""
        self.savepath = ""
        self.outputpath = ""
        self.current_directory = os.getcwd()

        self.remix_base = ""
        self.remix_SAR = ""
        self.remix_optical = ""
        self.remix_2_SAR = ""
        self.remix_2_optical = ""
        self.fusion_file_path = ""
        self.result_file_path = ""

    # 下拉框初始化功能

    def onComboClicked(self, index, event):
        font = QFont()
        font.setFamily("新宋体")
        font.setBold(True)
        font.setPointSize(12)
        # 舰船检测
        if index == 1:
            QtWidgets.QComboBox.showPopup(self.comboBox)
            if not self.comboBox_already_filled:
                self.comboBox.setFont(font)
                self.comboBox.addItems(['SAR', '光学'])
                self.comboBox_already_filled = True

    def chooseImage(self, input_widget, output_widget, type=None):
        if self.imgpath != "":
            self.imgpath = ""
            self.savepath = ""
            self.outputpath = ""
            self.type = None

        # 直接打开文件选择对话框，只允许选择文件
        file_path, _ = QFileDialog.getOpenFileName(self, "选择文件", "", "Image Files (*.png *.jpg *.jpeg *.bmp *.tiff);;All Files (*)")

        if file_path == "":
            return
        else:
            self.imgpath = file_path
            self.type = type
            if os.path.isfile(file_path):
                if type == "SAR":
                    self.showsarimg()
                elif type == "optical":
                    self.showopticalimg()
                elif type == "Huge_image":
                    self.remix_base, _ = os.path.splitext(os.path.basename(file_path))
                    self.showinputimg()
                print("选择了文件")

        print("Image_Choose")

    # SAR图像选取及提取特征选取

    def SARImageChoose(self):
        self.chooseImage(self.input_SAR, self.output_SAR, type="SAR")

    # 光学图像选取及提取特征选取

    def opticalImageChoose(self):
        self.chooseImage(self.input_2, self.output_2, type="optical")

    # 大场景图像选取

    def HugeImageChoose(self):
        self.chooseImage(self.inputimage, self.outputimage, type="Huge_image")

    # 决策融合

    def ReMix(self):

        wb1 = load_workbook(filename=self.remix_SAR)
        wb2 = load_workbook(filename=self.remix_optical)

        # 获取第一个工作表
        ws1 = wb1.active
        ws2 = wb2.active

        # 初始化新的Workbook用于保存结果
        result_wb = Workbook()
        result_ws = result_wb.active

        # 设置标题行
        result_ws.cell(row=1, column=1, value='class_SAR')
        result_ws.cell(row=1, column=2, value='class_optical')
        result_ws.cell(row=1, column=3, value='confidence')

        # 根据中心坐标匹配目标
        matched_pairs = match_targets_by_distance(ws1, ws2)
        # print(matched_pairs)
        # 遍历每一个匹配对，并将结果写入新的工作表
        for index, (i, j) in enumerate(matched_pairs):
            # 初始化值为 None，以便在目标没有匹配到时使用
            col1_file1, col2_file1 = None, None
            col1_file2, col2_file2 = None, None

            if i is not None:
                # 获取文件1的第一列和第三列数据
                col1_file1 = ws1.cell(row=i, column=1).value
                col2_file1 = ws1.cell(row=i, column=2).value

            if j is not None:
                # 获取文件2的第一列和第三列数据
                col1_file2 = ws2.cell(row=j, column=1).value
                col2_file2 = ws2.cell(row=j, column=2).value
            # 确保数值不为空且为数字类型，如果为空则设置为默认值0.0
            col2_file1 = float(col2_file1) if col2_file1 is not None else 0.0
            col2_file2 = float(col2_file2) if col2_file2 is not None else 0.0

            # 动态计算每一行的权重
            weight1, weight2 = calculate_dynamic_weights(col2_file1, col2_file2,col1_file1,col1_file2)

            # 计算合并后的第三列数据
            combined_col = (col2_file1 * weight1) + (col2_file2 * weight2)

            # 将结果写入新的Excel文件中，从第二行开始
            result_ws.cell(row=index + 2, column=1, value=col1_file1)
            result_ws.cell(row=index + 2, column=2, value=col1_file2)
            result_ws.cell(row=index + 2, column=3, value=combined_col)

        # 在当前路径下创建output/remix文件夹
        output_dir = os.path.join(os.getcwd(), 'output', 'remix')
        os.makedirs(output_dir, exist_ok=True)

        # 保存结果到新的xlsx文件中
        output_file = os.path.join(output_dir, 'remix_result.xlsx')
        print(output_file)
        result_wb.save(output_file)

        # 调用read_xlsx函数显示remix_result.xlsx文件
        self.read_xlsx(xlsx_path=output_file)


    def get_base_path(self):
        # 获取程序根目录
        if hasattr(sys, '_MEIPASS'):
            # PyInstaller 打包后的路径
            return os.path.dirname(sys.argv[0])
        else:
            # 开发环境中的路径
            return os.path.dirname(os.path.abspath(__file__))
    # 特征融合

    def ReMix_2(self):

        if not self.remix_2_SAR or not self.remix_2_optical:
            methods.message_remix()
        else:
            # 生成文件夹路径
            output_dir = os.path.join(os.getcwd(), 'output', 'remix_2')
            os.makedirs(output_dir, exist_ok=True)

            parent_dir = os.path.dirname(self.get_base_path())
            # 构建命令
            command = [
                'python', 'rec\single_test_fusion_SAR_optics.py',
                self.remix_2_SAR, self.remix_2_optical, output_dir
            ]

            print(f"Command to execute: {command}")
            print(f"Working directory: {parent_dir}")
            # 执行命令
            subprocess.run(command,cwd = parent_dir)

            # 生成文件路径
            self.fusion_file_path = os.path.join(output_dir, 'fusion.txt')
            self.result_file_path = os.path.join(output_dir, 'result.txt')

            # 更新self.label_2的文本显示
            if hasattr(self, 'label_2'):
                self.label_2.setText(f"融合结果已保存在：{self.fusion_file_path}")

            # 读取 result_file_path 内容并显示在 label_confidence 中
            if hasattr(self, 'label_confidence'):
                if os.path.isfile(self.result_file_path):
                    with open(self.result_file_path, 'r') as file:
                        result_content = file.read()
                    self.label_confidence.setText(f"预测结果——{result_content}")
                else:
                    self.label_confidence.setText("结果文件不存在")

    # 查看融合向量

    def Check(self):
        file_path = self.fusion_file_path
        if file_path:
            print(f"Selected file: {file_path}")
            self.read_output_txt(file_path)
        else:
            methods.message_check()

    # 功能区分及指令初始化

    def QtStart(self):
        # self.output.flag(True)
        try:
            function = self.comboBox.currentText()
            if function == 'SAR':
                if self.type == "Huge_image":
                    self.functions("SAR_Ship_Detection", "大场景图片")
                self.remix_SAR = "output/SAR_Ship_Detection/" + self.remix_base + "/output.xlsx"
            elif function == '光学':
                if self.type == "Huge_image":
                    self.functions("optical_Ship_Detection", "大场景图片")
                    self.remix_optical = "output/optical_Ship_Detection/" + self.remix_base + "/output.xlsx"
            else:
                methods.message_functionchoose()
        except AttributeError:
            methods.message_imgchoose()

    # 区分选取功能，调用线程启用相关服务

    def functions(self, function, method):
        imgpath = self.imgpath
        if self.savepath == "":
            savepath = self.current_directory + "/output/" + function + "/"
        else:
            savepath = self.savepath + "/output/" + function + "/"
        self.outputpath = savepath
        if methods.message_button(imgpath, savepath):
            self.thread = Worker(imgpath, savepath, function, method)
            self.thread.finished.connect(self.Finished)
            self.thread.start()

    def Finished(self):
        # 线程完成后执行的操作
        if os.path.isfile(self.imgpath):

            self.showoutputimg()

            self.read_xlsx()

    # 程序窗口变化事件
    def ResizeEvent(self, event):
        self.showinputimg()
        self.showoutputimg()
        self.showsarimg()
        self.showopticalimg()
        super(Ui_MainWindow, self).resizeEvent(event)

    # 显示功能
    def showinputimg(self):
        self.load_and_scale_image(self.imgpath, self.inputimage)

    def showoutputimg(self):
        if self.outputpath:
            img_name = os.path.splitext(os.path.basename(self.imgpath))[0]
            output_folder = os.path.join(self.outputpath, img_name)
            output_img_path = os.path.join(output_folder, "output.png")
            self.load_and_scale_image(output_img_path, self.outputimage)

    def showsarimg(self):
        if os.path.isfile(self.imgpath):
            base_name, ext = os.path.splitext(self.imgpath)

            parent_dir = os.path.dirname(self.imgpath)

            feature_foler = os.path.join(os.path.dirname(parent_dir), os.path.basename(parent_dir) + "_feature")
            input_file_path = f"{base_name}{ext}"
            feature_path = os.path.join(feature_foler,os.path.basename(base_name) + "_feature" + ext)

            # 加载和缩放正确的输入文件
            self.load_and_scale_image(input_file_path, self.input_SAR)

            # 设置 remix_2_SAR 文件路径
            self.remix_2_SAR = os.path.join(feature_foler,os.path.basename(base_name) + "fusion.txt")

            # 检查特征图是否存在，然后加载并缩放特征图
            if os.path.isfile(feature_path):
                self.load_and_scale_image(feature_path, self.output_SAR)
            else:
                print("特征图不存在")

    def showopticalimg(self):
        if os.path.isfile(self.imgpath):
            base_name, ext = os.path.splitext(self.imgpath)

            parent_dir = os.path.dirname(self.imgpath)

            feature_foler = os.path.join(os.path.dirname(parent_dir), os.path.basename(parent_dir) + "_feature")
            input_file_path = f"{base_name}{ext}"
            feature_path = os.path.join(feature_foler, os.path.basename(base_name) + "_feature.jpg")

            print(feature_path)

            # 加载和缩放正确的输入文件
            self.load_and_scale_image(input_file_path, self.input_2)

            # 设置 remix_2_optical 文件路径
            self.remix_2_optical = os.path.join(feature_foler, os.path.basename(base_name) + ".txt")

            # 检查特征图是否存在，然后加载并缩放特征图
            if os.path.isfile(feature_path):
                self.load_and_scale_image(feature_path, self.output_2)
            else:
                print("特征图不存在")

    def load_and_scale_image(self, img_path, label):
        if os.path.isfile(img_path):
            image = QtGui.QImage(img_path)
            if image.isNull():
                print("Failed to load image")
                return
            # 清除标签中的文本
            label.clear()
            pixmap = QtGui.QPixmap.fromImage(image)
            label.setPixmap(pixmap)
            label.setAlignment(QtCore.Qt.AlignCenter)
            label.setScaledContents(False)
            label.get_size(pixmap.width(), pixmap.height())

    # 读取特征向量功能

    def read_output_txt(self, output_path):
        # 清空文本编辑区域
        self.label_remix.clear()
        if os.path.exists(output_path):
            with open(output_path, 'r') as f:
                content = f.read()
                self.label_remix.setPlainText(content)  # 设置纯文本内容

    # 读取表格功能
    def read_xlsx(self, xlsx_path=""):
        self.output.clear()

        if not xlsx_path:
            if self.outputpath:
                img_name = os.path.splitext(os.path.basename(self.imgpath))[0]
                xlsx_path = os.path.join(self.outputpath, img_name, "output.xlsx")

        if not os.path.exists(xlsx_path):
            json_path = xlsx_path.replace(".xlsx", ".json")
            txt_path = xlsx_path.replace(".xlsx", ".txt")
            if os.path.exists(txt_path):
                # 如果存在txt文件，则读取txt文件
                txt_to_xlsx(txt_path)
                return
            elif os.path.exists(json_path):
                # 将json转换为xlsx并读取
                json_to_excel(json_path)

            else:
                # 如果两个文件都不存在，直接返回
                print(f"Neither {xlsx_path}, {json_path}, nor {txt_path} exists.")
                return
        if os.path.exists(xlsx_path):
            print("xlsx_path")
        # 直接读取存在的xlsx文件
        book = load_workbook(filename=xlsx_path)

        # 获取活动工作表
        sheet = book.active
        nrows = sheet.max_row  # 取最大行数
        ncols = sheet.max_column  # 取最大列数

        # 确保没有数据时不会报错
        if nrows < 2:
            print("The sheet contains no data beyond the header.")
            return

        # 限制列数最大为26（可选，如果你希望保留最大26列的限制）
        if ncols > 26:
            print(f"Columns: {ncols} > 26! Reducing to 26.")
            ncols = 26

        # 使用Excel第一行数据作为列头
        headers = [cell.value for cell in sheet[1]]
        self.output.setColumnCount(ncols)  # 设置列数
        self.output.setHorizontalHeaderLabels(headers[:ncols])  # 设置自定义表头

        # 设置行数，减去表头行
        self.output.setRowCount(nrows - 1)

        self.output.setUpdatesEnabled(False)  # 禁用更新以提高性能

        # 从第二行开始遍历Excel数据并插入到表格控件中
        for row, row_data in enumerate(sheet.iter_rows(min_row=2, max_row=nrows, max_col=ncols), start=0):
            for col, cell in enumerate(row_data):
                item = QTableWidgetItem(self.format_cell(cell))
                item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)  # 设置为只读
                self.output.setItem(row, col, item)

        # 设置列宽
        self.output.setColumnWidth(0, 200)
        self.output.setColumnWidth(1, 200)
        self.output.setColumnWidth(2, 300)
        self.output.setUpdatesEnabled(True)  # 启用更新显示

    # 格式化表格显示
    def format_cell(self, cell):
        """ 根据单元格类型格式化单元格数据 """
        if cell.value is None:
            return ''
        elif cell.data_type == 's':  # string
            return str(cell.value)
        elif cell.data_type == 'n':  # number
            if isinstance(cell.value, int):
                return str(cell.value)
            else:  # float
                return f"{cell.value:.4f}"
        elif cell.data_type == 'd':  # date
            return cell.value.strftime('%Y-%m-%d')
        else:
            return str(cell.value)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "水中目标光电智能识别软件"))
        self.groupBox_2.setTitle(_translate("MainWindow", "操作区"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">传感器类型</p></body></html>"))
        self.Huge_Image_Choose.setText(_translate("MainWindow", "选择图片"))
        self.Start.setText(_translate("MainWindow", "开始"))
        self.remix.setText(_translate("MainWindow", "决策融合"))
        self.groupBox_4.setTitle(_translate("MainWindow", "输出信息"))
        self.inputimage.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">输入图像</p></body></html>"))
        self.outputimage.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">输出图像</p></body></html>"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_3), _translate("MainWindow", "场景检测"))
        self.groupBox_3.setTitle(_translate("MainWindow", "操作区"))
        self.SAR_Choose.setText(_translate("MainWindow", "SAR特征提取"))
        self.optical_Choose.setText(_translate("MainWindow", "光学特征提取"))
        self.Start_2.setText(_translate("MainWindow", "特征融合"))
        self.check.setText(_translate("MainWindow", "查看融合向量"))
        self.groupBox_5.setTitle(_translate("MainWindow", "输出信息"))
        self.label_2.setText(_translate("MainWindow", "融合结果已保存在："))
        self.label_remix.setText(_translate("MainWindow", "融合后特征向量显示"))
        self.label_confidence.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">识别结果</p></body></html>"))
        self.input_SAR.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">输入SAR图像</p></body></html>"))
        self.output_SAR.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">输出SAR特征图像</p></body></html>"))
        self.input_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">输入光学图像</p></body></html>"))
        self.output_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">输出光学特征图像</p></body></html>"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_4), _translate("MainWindow", "特征融合"))
